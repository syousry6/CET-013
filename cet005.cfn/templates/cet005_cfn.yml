Parameters:
  Region:
    Type: String
    Default: us-east-2
    AllowedValues:
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - us-west-2
      - us-west-1
      - us-east-2
      - us-east-2
      - ap-south-1
      - ap-northeast-2
      - ap-northeast-1
      - ap-southeast-2
      - ap-southeast-1
      - ca-central-1
      - sa-east-1
    Description: Enter the AWS region to deploy stack. Default is eu-east-2
  VPCCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.40.0.0/16
    Description: Enter the CIDR for your VPC
  PublicSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.40.1.0/24
    Description: Enter the CIDR for your Public Subnet 1
  PublicSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.40.2.0/24
    Description: Enter the CIDR for your Public Subnet 2
  PrivateSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.40.10.0/24
    Description: Enter the CIDR for your Private Subnet 1
  PrivateSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.40.20.0/24
    Description: Enter the CIDR for your Private Subnet 2
  KeyPair:
    Type: String
    Default: CET-005
    Description: Enter name of pre-generated KeyPair
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings:
  RegionMap:
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
    eu-west-2:
      HVM64: ami-f976839e
    eu-west-3:
      HVM64: ami-0ebc281c20e89ba4b
    eu-central-1:
      HVM64: ami-0233214e13e500f77
    us-west-2:
      HVM64: ami-0b59bfac6be064b78
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
    us-east-2:
      HVM64: ami-01aab85a5e4a5a0fe
    us-east-2:
      HVM64: ami-0ff8a91507f77f867
    ap-south-1:
      HVM64: ami-0912f71e06545ad88
    ap-northeast-2:
      HVM64: ami-0a10b2721688ce9d2
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
    ca-central-1:
      HVM64: ami-0b18956f
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: VPC-1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}a
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicSubnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}b
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicSubnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}a
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}b
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnet-2

  IG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -  Key: Name
           Value: IG

  AttachIGtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IG
      VpcId: !Ref VPC

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-RT

  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-RT

  AssociatePublicSubnet1ToPublicRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  AssociatePublicSubnet2ToPublicRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  AssociatePrivateSubnet1ToPrivateRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet1

  AssociatePrivateSubnet2ToPrivateRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet2

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IG
      RouteTableId: !Ref PublicRT

  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW
      RouteTableId: !Ref PrivateRT

  # Create EIP which will be used by the NAT Gateway
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC

  NATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NAT-GW

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Bastion Host to allow SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Bastion-SG
      VpcId: !Ref VPC

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Application Load Balancer to expose HTTP 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SG
      VpcId: !Ref VPC

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 to allow SSH from Bastion and expose HTTP 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name
          Value: EC2-SG
      VpcId: !Ref VPC

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub ${Region}a
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId:  !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref BastionSG
      Tags:
        - Key: Name
          Value: Bastion Host

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: AppTargets
      Port: 80
      Protocol: HTTP
      Targets:
      - Id: !Ref EC2App1
        Port: 80
      - Id: !Ref EC2App2
        Port: 80
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ALB-TG

  EC2App1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub ${Region}a
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              aws ec2 wait nat-gateway-available --nat-gateway-ids {gateway}
              sudo yum update -y
              sudo yum install -y httpd
              sudo service httpd start
              sudo chkconfig httpd on
              echo “Hello Onica from EC2 App1” > /var/www/html/index.html
            - {
              gateway: !Ref NATGW
              }
      InstanceType: t2.micro
      KeyName: CET-005
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet1
          GroupSet:
            - !Ref EC2SG
      Tags:
        - Key: Name
          Value: EC2-1

  EC2App2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub ${Region}b
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              aws ec2 wait nat-gateway-available --nat-gateway-ids {gateway}
              sudo yum update -y
              sudo yum install -y httpd
              sudo service httpd start
              sudo chkconfig httpd on
              echo “Hello Onica from EC2 App2” > /var/www/html/index.html
            - {
              gateway: !Ref NATGW
              }
      InstanceType: t3.micro
      KeyName: CET-005
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet2
          GroupSet:
            - !Ref EC2SG
      Tags:
        - Key: Name
          Value: EC2-2
